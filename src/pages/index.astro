---
import DefaultLayout from '../layouts/Default.astro';
import Container from '../components/Container.astro';

import { getCollection } from 'astro:content';
import { createSearchIndex, formatPostDate, sortPostsByDate } from '../helpers/blog';
import type { PostProps } from '../types/blog';

const posts: PostProps[] = await getCollection('blog');
const sortedPosts = sortPostsByDate(posts);
const searchIndex = createSearchIndex(posts);
---

<DefaultLayout>
  <Container>
    <script type="application/json" id="blog-posts-json" set:html={JSON.stringify(searchIndex)} />
    <section class="pb-10 pt-8" data-testid="hero-banner">
      <h1 class="font-(--font-bold) text-3xl my-2">Procure um assunto</h1>
      <form>
        <input
          class="bg-white p-3 rounded-sm shadow-2xl text-abyss-500 w-full"
          id="search-input"
          max-length="20"
          name="search"
          placeholder="Digite e as postagens serão filtradas"
          type="text"
        />
      </form>
    </section>
    <section class="my-8" data-testid="section-posts" id="section-posts">
      <ul data-testid="posts-list" id="posts-list">
        {
          sortedPosts.map((post: any) => (
            <li data-testid={post.id} id={post.id}>
              <a class="block mb-12" href={`/${post.id}`}>
                <datetime class="text-sm">
                  {formatPostDate(post.data.date)}
                </datetime>
                <h2 class="font-(--font-bold) text-xl">{post.data.title}</h2>
              </a>
            </li>
          ))
        }
      </ul>
      <div
        aria-live="polite"
        class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative hidden"
        id="search-alert"
        role="alert"
      >
        <strong class="font-bold">Eita!</strong>
        <span class="block sm:inline">Nenhum resultado encontrado.</span>
      </div>
    </section>
  </Container>
</DefaultLayout>

<script>
  import Fuse from 'fuse.js';

  const searchIndex = document.getElementById('blog-posts-json').textContent;

  let fuse = null;
  const searchAlert = document.getElementById('search-alert');
  const searchInput = document.getElementById('search-input');
  const postList = document.getElementById('posts-list');
  const allPosts = Array.from(postList.children);

  function initFuse() {
    if (!fuse) {
      try {
        fuse = new Fuse(JSON.parse(searchIndex), {
          keys: ['title', 'description', 'body'],
          threshold: 0.3,
        });
      } catch (error) {
        console.error('Error initializing Fuse:', error);
      }
    }
  }

  function debounce(callbackFn, delay) {
    let timeoutId;

    return function (...args) {
      clearTimeout(timeoutId);
      timeoutId = setTimeout(() => {
        callbackFn.apply(this, args);
      }, delay);
    };
  }

  function toggleDisplay(action = 'hide') {
    const CLASSLIST_METHOD = {
      hide: (item) => item.classList.add('hidden'),
      show: (item) => item.classList.remove('hidden'),
    };
    return CLASSLIST_METHOD[action];
  }

  function toggleAllPosts(action = 'hide') {
    allPosts.forEach((post) => toggleDisplay(action)(post));
  }

  function toggleSearchAlert(action = 'hide') {
    toggleDisplay(action)(searchAlert);
  }

  function handleKeyDown(event: KeyboardEvent) {
    if (event.key === 'Enter') {
      event.preventDefault();
      return;
    };
  }

  function updatePostList(event: KeyboardEvent) {
    const inputValue = event.target.value.trim();

    if (inputValue.length < 3) {
      toggleAllPosts('show');
      return;
    }

    if (!fuse) {
      console.error('Fuse.js não foi inicializado');
      toggleAllPosts('show');
      return;
    }

    const results = fuse.search(inputValue);

    if (results.length) {
      toggleSearchAlert();
      toggleAllPosts();
      results.map((post) => {
        postList.querySelector(`#${post.item.id}`).classList.remove('hidden');
      });
    } else {
      toggleAllPosts();
      toggleSearchAlert('show');
    }
  }

  initFuse();
  const debouncedSearch = debounce(updatePostList, 300);
  searchInput?.addEventListener('keydown', handleKeyDown);
  searchInput?.addEventListener('input', debouncedSearch);
</script>
